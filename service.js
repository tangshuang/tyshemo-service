const { Mocker } = require('tyshemo/dist/mocker')
const { Parser } = require('tyshemo/dist/parser')
const express = require('express')
const { Ty } = require('tyshemo')
const fs = require('fs')
const path = require('path')
const { stringify, getPath } = require('./utils')

class Service {
  constructor(options = {}) {
    const { data, mockConfig, parseConfig } = options
    this.data = data
    this.mocker = new Mocker(mockConfig)
    this.parser = new Parser(parseConfig)
    this.options = options
  }

  mock(mockServerConfig = {}) {
    const app = express()

    app.use(express.json())
    app.use(express.urlencoded({ extended: true }))

    const items = []
    this.data.forEach((group) => {
      items.push(...group.items)
    })

    const { responseWrapper, requestWrapper, baseUrl = '' } = this.options
    const { port = '8089' } = mockServerConfig

    items.forEach((item) => {
      const { method, path, request, response } = item
      const url = (item.baseUrl !== undefined ? item.baseUrl : baseUrl) + path

      app[method](url, (req, res) => {
        // check req data
        if (request) {
          const reqdata = method === 'get' ? req.query : req.body
          const getdata = requestWrapper ? requestWrapper(reqdata) : reqdata
          const error = Ty.catch(getdata).by(request)
          if (error) {
            res.status(499)
            res.end(error.message)
            return
          }
        }

        // give mock data for response
        const mockdata = this.mocker.mock(response)
        const resdata = responseWrapper ? responseWrapper(mockdata) : mockdata
        res.json(resdata)
      })
    })

    app.listen(port)
  }

  doc(docServerConfig = {}) {
    const { responseWrapper, errorWrapper, globalErrors = {}, requestWrapper, baseUrl = '' } = this.options
    const { port = '8088', title = 'TySheMo', description = 'This is an api doc generated by TySheMo.' } = docServerConfig

    const data = this.data.map((group) => {
      const { items } = group
      return {
        ...group,
        items: items.map((item) => {
          const { request, response, error = 'message', errors = {} } = item

          const requestDesc = request ? this.parser.describe(request) : null
          const requestComments = request ? request.__comments : {}
          const requestWrapped = requestWrapper ? requestWrapper(requestDesc) : requestDesc
          const requestCommentRoot = requestWrapper ? getPath(requestWrapper('1234567890987654321'), '1234567890987654321') : ''
          const requestText = requestWrapped ? stringify(requestWrapped, requestComments, requestCommentRoot) : ''

          const responseDesc = response ? this.parser.describe(response) : null
          const responseComments = response ? response.__comments : {}
          const responseWrapped = responseWrapper ? responseWrapper(responseDesc) : responseDesc
          const responseCommentRoot = responseWrapper ? getPath(responseWrapper('1234567890987654321'), '1234567890987654321') : ''
          const responseText = responseWrapped ? stringify(responseWrapped, responseComments, responseCommentRoot) : ''

          const errorWrapped = errorWrapper ? errorWrapper(error) : error
          const errorText = errorWrapped ? stringify(errorWrapped) : ''
          const errorsMappingText = stringify({
            ...globalErrors,
            ...errors,
          })

          return {
            ...item,
            path: (item.baseUrl !== undefined ? item.baseUrl : baseUrl) + item.path,
            request: requestText,
            response: responseText,
            error: errorText,
            errors: errorsMappingText,
          }
        }),
      }
    })

    const app = express()

    app.use('/vue.js', express.static(path.resolve(__dirname, 'node_modules/vue/dist/vue.js')))
    app.use('*', (req, res) => {
      fs.readFile(path.resolve(__dirname, 'index.html'), (error, buffer) => {
        let text = buffer.toString()
        text = text.replace(/__TITLE__/g, title)
        text = text.replace(/__DESCRIPTION__/g, description)
        const html = text.replace('__DATA__', JSON.stringify(data))
        res.type('html')
        res.send(html)
      })
    })
    app.listen(port)
  }
}

module.exports = Service
